PID controller instruction set


Request

           _      _ _ _ _      _ _ _    optional FLOAT VALUES

        opcode   variable/   reserved
                  command


    opcode
        0 - read
        1 - write


    variable
        0100 - setpoint

        0101 - Kp
        0110 - Ki
        0111 - Kd

        1000 - Ei

        1001 - EpL
        1010 - EiL


    special (opcode is always 0)
        0000 - process variable stop stream
        0001 - process variable start stream

        0010 - controller output stop stream
        0011 - controller output start stream

        1011 - save to EEPROM


Response

           _      _ _ _ _      _        _ _     optional FLOAT VALUES

        opcode   variable   result   reserved

    result
        0 - success
        1 - error


Request

    pattern (high-level):
        [OPERATION] [OBJECT] [optional VALUES]

    pattern (low-level raw bytes):
        [OPCODE (R/W) 1 byte][OBJCODE 1 byte][optional VALUES 4-bytes little-endian floats]

    example (high-level):
        1) W sp 118.7
               - set setpoint value to 118.7
        2) R Kp
               - read proportional gain

    example (low-level):
        1) 0x11 0xA0 0x42 0xED 0x66 0x66
        2) 0x10 0xB0


Response

    pattern:
        [RESULT CODE] [OPERATION] [OBJECT] [optional VALUES]

    example (high-level):
        1) 0 R EpL -2000 2000
               - successful reading of proportional error' limits (minimum, maximum values)
        2) 1 W Ki
               - failed to write Ki

    example (low-level):
        1) 0x00 0x10 0xD0 ...
        2) 0x01 0x11 0xB1


Objects list ([OBJECT] field)
    sp     |     0xA0     -     setpoint

    Kp     |     0xB0     -     proportional gain
    Ki     |     0xB1     -     integral gain
    Kd     |     0xB2     -     derivative gain

    Ei     |     0xC0     -     integral error (for reset purpose)

    EpL    |     0xD0     -     proportional error' limits (minimum, maximum values)
    EiL    |     0xD1     -     integral error' limits (minimum, maximum values)


Special commands (command from host PC and response from controller only)

    Process variable (i.e. feedback input) stream:
        start: pv 1 (0x21)
        stop: pv 0 (0x20)

        response on start: i[VALUE] (0x20 ...)
        response on stop: -

    Controller output (i.e. value that PID algorithm did calculate) stream:
        start: co 1 (0x31)
        stop: co 0 (0x30)

        response on start: o[VALUE] (0x30 ...)
        response on stop: -

    Save to EEPROM:
        0x40


TODO: custom commands (e.g. PWM period, regulation period, error codes etc.)
